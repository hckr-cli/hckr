name: Publish to PyPI

on:
  release:
    types: [published]

#on:
#  push:
#    tags:
#      - 0.1.*

permissions:
  contents: read

jobs:
  deploy:

    runs-on: ubuntu-latest

    environment: release
    permissions:
      id-token: write # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install hatch

    - name: Run Tests
      run: make test

    - name: Check lint
      run: make lint

    - name: Run Coverage
      run: make coverage

    - name: Run MyPy Check
      run : make checks

    - name: Extract tag name
      id: get_tag
      run: echo "##[set-output name=tag;]$(echo ${GITHUB_REF#refs/tags/})"

    - name: Check if tag is in release format
      id: check_tag
      run: |
        if [[ "${{ steps.get_tag.outputs.tag }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "This is a release tag."
          echo "##[set-output name=release_type;]PATCH"
        elif [[ "${{ steps.get_tag.outputs.tag }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.dev[0-9]+$ ]]; then
          echo "This is a development tag."
          echo "##[set-output name=release_type;]DEV"
        elif [[ "${{ steps.get_tag.outputs.tag }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.rc[0-9]+$ ]]; then
          echo "This is a development tag."
          echo "##[set-output name=release_type;]RC"
        else
          echo "Tag format is not recognized."
          echo "##[set-output name=release_type;]false"
          exit 1
        fi
    - name: Build and publish if release tag
      if: steps.check_tag.outputs.release_type == 'PATCH'
      run: |
        echo "Running build and publish steps for release..."
        git config --global user.name 'autobump'
        git config --global user.email 'autobump@markata.dev'
        VERSION=`hatch version`
        hatch version release
        NEW_VERSION=`hatch version`
        git add markta/__about__.py
        git commit -m "Bump version: $VERSION → $NEW_VERSION"
        git tag $VERSION
        git push
        git push --tags
    - name: Additional steps for development tag
      if: steps.check_tag.outputs.release_type == 'DEV'
      run: |
        echo "Handling development tag..."
        git config --global user.name 'autobump'
        git config --global user.email 'autobump@markata.dev'
        VERSION=`hatch version`
        # if current version is not already beta then bump minor and beta
        [ -z "${b##*`hatch version`*}" ] && hatch version b || hatch version minor,b
        NEW_VERSION=`hatch version`
        git add markta/__about__.py
        git commit -m "Bump version: $VERSION → $NEW_VERSION"
        git tag $VERSION
        git push
        git push --tags

    - name: Additional steps for release candidate tag
      if: steps.check_tag.outputs.release_type == 'RC'
      run: |
        echo "Handling development tag..."
        git config --global user.name 'autobump'
        git config --global user.email 'autobump@markata.dev'
        VERSION=`hatch version`
        # if current version is not already beta then bump minor and beta
        [ -z "${b##*`hatch version`*}" ] && hatch version b || hatch version minor,b
        NEW_VERSION=`hatch version`
        git add markta/__about__.py
        git commit -m "Bump version: $VERSION → $NEW_VERSION"
        git tag $VERSION
        git push
        git push --tags


    - name: Build package
      run: make package

    - name: Publish package distributions to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
